/*
* generated by Xtext
*/
package smdp.project.survey.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import smdp.project.survey.services.SurveyDSLGrammarAccess;

public class SurveyDSLParser extends AbstractContentAssistParser {
	
	@Inject
	private SurveyDSLGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected smdp.project.survey.ui.contentassist.antlr.internal.InternalSurveyDSLParser createParser() {
		smdp.project.survey.ui.contentassist.antlr.internal.InternalSurveyDSLParser result = new smdp.project.survey.ui.contentassist.antlr.internal.InternalSurveyDSLParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getQuestionAccess().getAlternatives(), "rule__Question__Alternatives");
					put(grammarAccess.getAnswerAccess().getAlternatives(), "rule__Answer__Alternatives");
					put(grammarAccess.getEStringAccess().getAlternatives(), "rule__EString__Alternatives");
					put(grammarAccess.getEBooleanAccess().getAlternatives(), "rule__EBoolean__Alternatives");
					put(grammarAccess.getAnswer_ImplAccess().getGroup(), "rule__Answer_Impl__Group__0");
					put(grammarAccess.getOpenQuestionAccess().getGroup(), "rule__OpenQuestion__Group__0");
					put(grammarAccess.getOpenQuestionAccess().getGroup_3(), "rule__OpenQuestion__Group_3__0");
					put(grammarAccess.getOpenQuestionAccess().getGroup_3_2(), "rule__OpenQuestion__Group_3_2__0");
					put(grammarAccess.getMultipleChoiceAccess().getGroup(), "rule__MultipleChoice__Group__0");
					put(grammarAccess.getMultipleChoiceAccess().getGroup_3(), "rule__MultipleChoice__Group_3__0");
					put(grammarAccess.getMultipleChoiceAccess().getGroup_3_2(), "rule__MultipleChoice__Group_3_2__0");
					put(grammarAccess.getRadioChoiceAccess().getGroup(), "rule__RadioChoice__Group__0");
					put(grammarAccess.getRadioChoiceAccess().getGroup_3(), "rule__RadioChoice__Group_3__0");
					put(grammarAccess.getRadioChoiceAccess().getGroup_3_2(), "rule__RadioChoice__Group_3_2__0");
					put(grammarAccess.getOpenAnswerAccess().getGroup(), "rule__OpenAnswer__Group__0");
					put(grammarAccess.getSurveyAccess().getQuestionsAssignment(), "rule__Survey__QuestionsAssignment");
					put(grammarAccess.getAnswer_ImplAccess().getNameAssignment_2(), "rule__Answer_Impl__NameAssignment_2");
					put(grammarAccess.getAnswer_ImplAccess().getDescriptionAssignment_3(), "rule__Answer_Impl__DescriptionAssignment_3");
					put(grammarAccess.getOpenQuestionAccess().getDescriptionAssignment_1(), "rule__OpenQuestion__DescriptionAssignment_1");
					put(grammarAccess.getOpenQuestionAccess().getIsOptionalAssignment_2(), "rule__OpenQuestion__IsOptionalAssignment_2");
					put(grammarAccess.getOpenQuestionAccess().getRequiredPreviousAnswersAssignment_3_1(), "rule__OpenQuestion__RequiredPreviousAnswersAssignment_3_1");
					put(grammarAccess.getOpenQuestionAccess().getRequiredPreviousAnswersAssignment_3_2_1(), "rule__OpenQuestion__RequiredPreviousAnswersAssignment_3_2_1");
					put(grammarAccess.getOpenQuestionAccess().getOpenAnswerAssignment_4(), "rule__OpenQuestion__OpenAnswerAssignment_4");
					put(grammarAccess.getMultipleChoiceAccess().getDescriptionAssignment_1(), "rule__MultipleChoice__DescriptionAssignment_1");
					put(grammarAccess.getMultipleChoiceAccess().getIsOptionalAssignment_2(), "rule__MultipleChoice__IsOptionalAssignment_2");
					put(grammarAccess.getMultipleChoiceAccess().getRequiredPreviousAnswersAssignment_3_1(), "rule__MultipleChoice__RequiredPreviousAnswersAssignment_3_1");
					put(grammarAccess.getMultipleChoiceAccess().getRequiredPreviousAnswersAssignment_3_2_1(), "rule__MultipleChoice__RequiredPreviousAnswersAssignment_3_2_1");
					put(grammarAccess.getMultipleChoiceAccess().getAnswersAssignment_4(), "rule__MultipleChoice__AnswersAssignment_4");
					put(grammarAccess.getRadioChoiceAccess().getDescriptionAssignment_1(), "rule__RadioChoice__DescriptionAssignment_1");
					put(grammarAccess.getRadioChoiceAccess().getIsOptionalAssignment_2(), "rule__RadioChoice__IsOptionalAssignment_2");
					put(grammarAccess.getRadioChoiceAccess().getRequiredPreviousAnswersAssignment_3_1(), "rule__RadioChoice__RequiredPreviousAnswersAssignment_3_1");
					put(grammarAccess.getRadioChoiceAccess().getRequiredPreviousAnswersAssignment_3_2_1(), "rule__RadioChoice__RequiredPreviousAnswersAssignment_3_2_1");
					put(grammarAccess.getRadioChoiceAccess().getAnswersAssignment_4(), "rule__RadioChoice__AnswersAssignment_4");
					put(grammarAccess.getOpenAnswerAccess().getNameAssignment_2(), "rule__OpenAnswer__NameAssignment_2");
					put(grammarAccess.getOpenAnswerAccess().getDescriptionAssignment_3(), "rule__OpenAnswer__DescriptionAssignment_3");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			smdp.project.survey.ui.contentassist.antlr.internal.InternalSurveyDSLParser typedParser = (smdp.project.survey.ui.contentassist.antlr.internal.InternalSurveyDSLParser) parser;
			typedParser.entryRuleSurvey();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}
	
	public SurveyDSLGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(SurveyDSLGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
