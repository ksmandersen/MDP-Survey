/**
 * generated by Xtext
 */
package smdp.project.survey.generator;

import com.google.common.collect.Iterables;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.common.util.TreeIterator;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.IFileSystemAccess;
import org.eclipse.xtext.generator.IGenerator;
import org.eclipse.xtext.xbase.lib.Conversions;
import org.eclipse.xtext.xbase.lib.Functions.Function1;
import org.eclipse.xtext.xbase.lib.InputOutput;
import org.eclipse.xtext.xbase.lib.IterableExtensions;
import org.eclipse.xtext.xbase.lib.IteratorExtensions;
import org.eclipse.xtext.xbase.lib.Procedures.Procedure1;
import smdp.project.survey.generator.HTMLGenerator;
import smdp.project.survey.validation.SurveyDSLValidator;
import survey.Answer;
import survey.MultipleChoice;
import survey.Question;
import survey.RadioChoice;
import survey.Survey;

/**
 * Generates code from your model files on save.
 * 
 * see http://www.eclipse.org/Xtext/documentation.html#TutorialCodeGeneration
 */
@SuppressWarnings("all")
public class SurveyDSLGenerator implements IGenerator {
  public static CharSequence compileMainActivity(final Survey it) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("\t\t");
    _builder.append("package dk.itu.smdp.surveysample.survey;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import android.os.Bundle;");
    _builder.newLine();
    _builder.append("import android.support.v4.app.Fragment;");
    _builder.newLine();
    _builder.append("import android.support.v7.app.ActionBarActivity;");
    _builder.newLine();
    _builder.append("import android.view.LayoutInflater;");
    _builder.newLine();
    _builder.append("import android.view.Menu;");
    _builder.newLine();
    _builder.append("import android.view.MenuItem;");
    _builder.newLine();
    _builder.append("import android.view.View;");
    _builder.newLine();
    _builder.append("import android.view.ViewGroup;");
    _builder.newLine();
    _builder.append("import android.widget.Button;");
    _builder.newLine();
    _builder.append("import android.widget.CheckBox;");
    _builder.newLine();
    _builder.append("import android.widget.Checkable;");
    _builder.newLine();
    _builder.append("import android.widget.CompoundButton;");
    _builder.newLine();
    _builder.append("import android.widget.LinearLayout;");
    _builder.newLine();
    _builder.append("import android.widget.RadioButton;");
    _builder.newLine();
    _builder.append("import android.widget.RadioGroup;");
    _builder.newLine();
    _builder.append("import android.widget.TextView;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import java.util.ArrayList;");
    _builder.newLine();
    _builder.append("import java.util.List;");
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    _builder.append("public class MainActivity extends ActionBarActivity {");
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("protected void onCreate(Bundle savedInstanceState) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("super.onCreate(savedInstanceState);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("setContentView(R.layout.activity_main);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("if (savedInstanceState == null) {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("getSupportFragmentManager().beginTransaction()");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append(".add(R.id.container, new PlaceholderFragment())");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append(".commit();");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public boolean onCreateOptionsMenu(Menu menu) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("// Inflate the menu; this adds items to the action bar if it is present.");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("getMenuInflater().inflate(R.menu.main, menu);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return true;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public boolean onOptionsItemSelected(MenuItem item) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("// Handle action bar item clicks here. The action bar will");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("// automatically handle clicks on the Home/Up button, so long");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("// as you specify a parent activity in AndroidManifest.xml.");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("int id = item.getItemId();");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("if (id == R.id.action_settings) {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("return true;");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return super.onOptionsItemSelected(item);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* A placeholder fragment containing a simple view.");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public static class PlaceholderFragment extends Fragment implements View.OnClickListener, CheckBox.OnCheckedChangeListener {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("private Button mPreviousButton;");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("private Button mNextButton;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("        ");
    _builder.append("private Survey mSurvey;");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("private Question currentQuestion;");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("private TextView mQuestionTitleView;");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("private LinearLayout mOptionsLayout;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("        ");
    _builder.append("public PlaceholderFragment() {}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("        ");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("public View onCreateView(LayoutInflater inflater, ViewGroup container,");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("Bundle savedInstanceState) {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("View rootView = inflater.inflate(R.layout.fragment_main, container, false);");
    _builder.newLine();
    _builder.newLine();
    _builder.append("            ");
    _builder.append("mPreviousButton = (Button)rootView.findViewById(R.id.question_button_previous);");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("mPreviousButton.setOnClickListener(this);");
    _builder.newLine();
    _builder.newLine();
    _builder.append("            ");
    _builder.append("mNextButton = (Button)rootView.findViewById(R.id.question_button_next);");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("mNextButton.setOnClickListener(this);");
    _builder.newLine();
    _builder.newLine();
    _builder.append("            ");
    _builder.append("mQuestionTitleView = (TextView)rootView.findViewById(R.id.question_text_view);");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("mOptionsLayout = (LinearLayout)rootView.findViewById(R.id.question_options);");
    _builder.newLine();
    _builder.newLine();
    _builder.append("            ");
    _builder.append("createSurvey();");
    _builder.newLine();
    _builder.newLine();
    _builder.append("            ");
    _builder.append("return rootView;");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("        ");
    _builder.append("private void createSurvey() {");
    _builder.newLine();
    _builder.append("        \t");
    _builder.append("List<Question> questions = new ArrayList<Question>();");
    _builder.newLine();
    _builder.append("        \t");
    int questionNumber = 1;
    _builder.newLineIfNotEmpty();
    _builder.append("        \t");
    int optionNumber = 1;
    _builder.newLineIfNotEmpty();
    {
      EList<Question> _questions = it.getQuestions();
      for(final Question question : _questions) {
        _builder.append("        \t");
        _builder.newLine();
        _builder.append("        \t");
        _builder.append("\t");
        _builder.append("List<Option> qOptions");
        _builder.append(questionNumber, "        		");
        _builder.append(" = new ArrayList<Option>();");
        _builder.newLineIfNotEmpty();
        {
          if ((question instanceof MultipleChoice)) {
            {
              EList<Answer> _answers = ((MultipleChoice) question).getAnswers();
              for(final Answer option : _answers) {
                _builder.append("        \t");
                _builder.append("\t");
                _builder.append("qOptions");
                _builder.append(questionNumber, "        		");
                _builder.append(".add(new Option(\"");
                String _description = option.getDescription();
                _builder.append(_description, "        		");
                _builder.append("\"));");
                _builder.newLineIfNotEmpty();
                _builder.append("        \t");
                _builder.append("\t");
                _builder.append("// ");
                int _plus = (optionNumber + 1);
                int _optionNumber = optionNumber = _plus;
                _builder.append(_optionNumber, "        		");
                _builder.newLineIfNotEmpty();
              }
            }
          } else {
            if ((question instanceof RadioChoice)) {
              {
                EList<Answer> _answers_1 = ((RadioChoice) question).getAnswers();
                for(final Answer option_1 : _answers_1) {
                  _builder.append("        \t");
                  _builder.append("\t");
                  _builder.append("qOptions");
                  _builder.append(questionNumber, "        		");
                  _builder.append(".add(new Option(\"");
                  String _description_1 = option_1.getDescription();
                  _builder.append(_description_1, "        		");
                  _builder.append("\"));");
                  _builder.newLineIfNotEmpty();
                  _builder.append("        \t");
                  _builder.append("\t");
                  _builder.append("// ");
                  int _plus_1 = (optionNumber + 1);
                  int _optionNumber_1 = optionNumber = _plus_1;
                  _builder.append(_optionNumber_1, "        		");
                  _builder.newLineIfNotEmpty();
                }
              }
            } else {
              _builder.append("        \t");
              _builder.append("\t");
              _builder.append("\t");
              _builder.newLine();
            }
          }
        }
        _builder.append("        \t");
        _builder.newLine();
        _builder.append("        \t");
        _builder.append("\t");
        _builder.append("Question.QuestionType qType");
        _builder.append(questionNumber, "        		");
        _builder.append(" = ");
        {
          if ((question instanceof MultipleChoice)) {
            _builder.append("Question.QuestionType.QUESTION_TYPE_MULTIPLE_CHOICE");
          } else {
            if ((question instanceof RadioChoice)) {
              _builder.append("Question.QuestionType.QUESTION_TYPE_SINGLE_CHOICE");
            } else {
              _builder.append("Question.QuestionType.QUESTION_TYPE_OPEN");
            }
          }
        }
        _builder.append(";");
        _builder.newLineIfNotEmpty();
        _builder.append("        \t");
        _builder.append("\t");
        _builder.append("Question question");
        _builder.append(questionNumber, "        		");
        _builder.append(" = new Question(\"");
        String _description_2 = question.getDescription();
        _builder.append(_description_2, "        		");
        _builder.append("\", qType");
        _builder.append(questionNumber, "        		");
        _builder.append(", \"");
        String _name = question.getName();
        _builder.append(_name, "        		");
        _builder.append("\", qOptions");
        _builder.append(questionNumber, "        		");
        _builder.append(");");
        _builder.newLineIfNotEmpty();
        _builder.append("        \t");
        _builder.append("\t");
        _builder.append("question");
        _builder.append(questionNumber, "        		");
        _builder.append(".setOptional(");
        {
          boolean _isIsOptional = question.isIsOptional();
          if (_isIsOptional) {
            _builder.append("true");
          } else {
            _builder.append("false");
          }
        }
        _builder.append(");");
        _builder.newLineIfNotEmpty();
        _builder.append("        \t");
        _builder.append("\t");
        {
          EList<Answer> _requiredPreviousAnswers = question.getRequiredPreviousAnswers();
          int _length = ((Object[])Conversions.unwrapArray(_requiredPreviousAnswers, Object.class)).length;
          boolean _greaterThan = (_length > 0);
          if (_greaterThan) {
            _builder.append("question");
            _builder.append(questionNumber, "        		");
            _builder.append(".setRequiredPreviousOption(\"");
            EList<Answer> _requiredPreviousAnswers_1 = question.getRequiredPreviousAnswers();
            Answer _last = IterableExtensions.<Answer>last(_requiredPreviousAnswers_1);
            String _name_1 = _last.getName();
            _builder.append(_name_1, "        		");
            _builder.append("\");");
          }
        }
        _builder.newLineIfNotEmpty();
        _builder.append("        \t");
        _builder.append("\t");
        _builder.append("questions.add(question");
        _builder.append(questionNumber, "        		");
        _builder.append(");");
        _builder.newLineIfNotEmpty();
        _builder.append("        \t");
        _builder.append("\t");
        _builder.append("// ");
        int _plus_2 = (questionNumber + 1);
        int _questionNumber = questionNumber = _plus_2;
        _builder.append(_questionNumber, "        		");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("            ");
    _builder.append("mSurvey = new Survey(questions);");
    _builder.newLine();
    _builder.newLine();
    _builder.append("            ");
    _builder.append("setActiveQuestion(mSurvey.getFirstQuestion());");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("        ");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("public void onClick(View view) {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("Question newQuestion;");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("if (view == mNextButton) {");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("newQuestion = currentQuestion.getNext();");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("// We have no questions in that direction");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("if (newQuestion == null) {");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("return;");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("                ");
    _builder.append("String requiredPrevious = newQuestion.getRequiredPreviousOption();");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("if (requiredPrevious != null) {");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("Option answered = currentQuestion.getAnsweredOption();");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("if (answered != null && !answered.getTitle().equals(requiredPrevious)) {");
    _builder.newLine();
    _builder.append("                        ");
    _builder.append("newQuestion = newQuestion.getNext();");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("} else {");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("newQuestion = currentQuestion.getPrevious();");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("            ");
    _builder.append("// We have no questions in that direction");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("if (newQuestion == null) {");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("return;");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("            ");
    _builder.append("setActiveQuestion(newQuestion);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("        ");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("public void onCheckedChanged(CompoundButton compoundButton, boolean b) {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("if (currentQuestion.getNext() == null) {");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("return;");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("            ");
    _builder.append("boolean hasOneChecked = false;");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("for (Option option : currentQuestion.getOptions()) {");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("Checkable view = option.getView();");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("if (view != null) {");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("hasOneChecked = view.isChecked();");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("if (hasOneChecked) {");
    _builder.newLine();
    _builder.append("                        ");
    _builder.append("break;");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("            ");
    _builder.append("mNextButton.setEnabled(hasOneChecked);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("        ");
    _builder.append("private void setActiveQuestion(Question question) {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("mPreviousButton.setEnabled(!question.isFirst());");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("mNextButton.setEnabled(!question.isLast());");
    _builder.newLine();
    _builder.newLine();
    _builder.append("            ");
    _builder.append("boolean hasOneChecked = question.getAnsweredOption() != null;");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("if (!question.isOptional()) {");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("mNextButton.setEnabled(hasOneChecked);");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("            ");
    _builder.append("if (question.isLast()) {");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("// Hide next button");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("// Show submit button");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("            ");
    _builder.append("clearQuestion();");
    _builder.newLine();
    _builder.newLine();
    _builder.append("            ");
    _builder.append("mQuestionTitleView.setText(question.getTitle());");
    _builder.newLine();
    _builder.newLine();
    _builder.append("            ");
    _builder.append("switch (question.getType()) {");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("case QUESTION_TYPE_MULTIPLE_CHOICE:");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("insertMultipleChoice(question);");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("break;");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("case QUESTION_TYPE_SINGLE_CHOICE:");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("insertSingleChoice(question);");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("break;");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("case QUESTION_TYPE_OPEN:");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("break;");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("default:");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("break;");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("            ");
    _builder.append("currentQuestion = question;");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("        ");
    _builder.append("private void clearQuestion() {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("if (currentQuestion != null) {");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("List<Option> options = currentQuestion.getOptions();");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("if (options != null) {");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("for (Option option : options) {");
    _builder.newLine();
    _builder.append("                        ");
    _builder.append("Checkable view = option.getView();");
    _builder.newLine();
    _builder.append("                        ");
    _builder.append("if (view != null && view.isChecked()) {");
    _builder.newLine();
    _builder.append("                            ");
    _builder.append("currentQuestion.setAnswer(option, null);");
    _builder.newLine();
    _builder.append("                        ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("                        ");
    _builder.append("option.setView(null);");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("            ");
    _builder.append("mOptionsLayout.removeAllViews();");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("        ");
    _builder.append("private void insertMultipleChoice(Question question) {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("Option answer = question.getAnsweredOption();");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("for (Option option : question.getOptions()) {");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("CheckBox checkBox = new CheckBox(getActivity());");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("checkBox.setLayoutParams(new LinearLayout.LayoutParams(LinearLayout.LayoutParams.WRAP_CONTENT,LinearLayout.LayoutParams.WRAP_CONTENT));");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("checkBox.setText(option.getTitle());");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("checkBox.setOnCheckedChangeListener(this);");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("if (!question.isOptional()) {");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("checkBox.setOnCheckedChangeListener(this);");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("if (answer != null && answer == option) {");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("checkBox.setChecked(true);");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("mOptionsLayout.addView(checkBox);");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("option.setView(checkBox);");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("        ");
    _builder.append("private void insertSingleChoice(Question question) {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("RadioGroup group = new RadioGroup(getActivity());");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("group.setLayoutParams(new LinearLayout.LayoutParams(LinearLayout.LayoutParams.WRAP_CONTENT,LinearLayout.LayoutParams.WRAP_CONTENT));");
    _builder.newLine();
    _builder.newLine();
    _builder.append("            ");
    _builder.append("Option answer = question.getAnsweredOption();");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("for (Option option : question.getOptions()) {");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("RadioButton radio = new RadioButton(getActivity());");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("radio.setLayoutParams(new LinearLayout.LayoutParams(LinearLayout.LayoutParams.WRAP_CONTENT,LinearLayout.LayoutParams.WRAP_CONTENT));");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("radio.setText(option.getTitle());");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("if (!question.isOptional()) {");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("radio.setOnCheckedChangeListener(this);");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("if (answer != null && answer == option) {");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("radio.setChecked(true);");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("group.addView(radio);");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("option.setView(radio);");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("            ");
    _builder.append("mOptionsLayout.addView(group);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public void doGenerate(final Resource resource, final IFileSystemAccess fsa) {
    TreeIterator<EObject> _allProperContents = EcoreUtil.<EObject>getAllProperContents(resource, false);
    final Function1<EObject,Boolean> _function = new Function1<EObject,Boolean>() {
      public Boolean apply(final EObject it) {
        boolean _constraint = SurveyDSLValidator.constraint(it);
        return Boolean.valueOf(_constraint);
      }
    };
    boolean _forall = IteratorExtensions.<EObject>forall(_allProperContents, _function);
    if (_forall) {
      TreeIterator<EObject> _allContents = resource.getAllContents();
      Iterable<EObject> _iterable = IteratorExtensions.<EObject>toIterable(_allContents);
      Iterable<Survey> _filter = Iterables.<Survey>filter(_iterable, Survey.class);
      final Procedure1<Survey> _function_1 = new Procedure1<Survey>() {
        public void apply(final Survey it) {
          final String fname = "MainActivity";
          String _plus = ("app-gen/survey/" + fname);
          String _plus_1 = (_plus + ".java");
          CharSequence _compileMainActivity = SurveyDSLGenerator.compileMainActivity(it);
          fsa.generateFile(_plus_1, _compileMainActivity);
          String _plus_2 = ("html-gen/survey/" + fname);
          String _plus_3 = (_plus_2 + ".html");
          CharSequence _generateHTMLActivity = HTMLGenerator.generateHTMLActivity(it);
          fsa.generateFile(_plus_3, _generateHTMLActivity);
        }
      };
      IterableExtensions.<Survey>forEach(_filter, _function_1);
    } else {
      InputOutput.<String>println("Constraints violated. Either a question contains a reference to its own answer or a description string is empty.");
    }
  }
}
