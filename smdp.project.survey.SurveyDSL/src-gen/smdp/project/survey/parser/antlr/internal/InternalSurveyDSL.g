/*
* generated by Xtext
*/
grammar InternalSurveyDSL;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package smdp.project.survey.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package smdp.project.survey.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import smdp.project.survey.services.SurveyDSLGrammarAccess;

}

@parser::members {

 	private SurveyDSLGrammarAccess grammarAccess;
 	
    public InternalSurveyDSLParser(TokenStream input, SurveyDSLGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "Survey";	
   	}
   	
   	@Override
   	protected SurveyDSLGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleSurvey
entryRuleSurvey returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSurveyRule()); }
	 iv_ruleSurvey=ruleSurvey 
	 { $current=$iv_ruleSurvey.current; } 
	 EOF 
;

// Rule Survey
ruleSurvey returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getSurveyAccess().getQuestionsQuestionParserRuleCall_0()); 
	    }
		lv_questions_0_0=ruleQuestion		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSurveyRule());
	        }
       		add(
       			$current, 
       			"questions",
        		lv_questions_0_0, 
        		"Question");
	        afterParserOrEnumRuleCall();
	    }

)
)+
;





// Entry rule entryRuleQuestion
entryRuleQuestion returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getQuestionRule()); }
	 iv_ruleQuestion=ruleQuestion 
	 { $current=$iv_ruleQuestion.current; } 
	 EOF 
;

// Rule Question
ruleQuestion returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getQuestionAccess().getOpenQuestionParserRuleCall_0()); 
    }
    this_OpenQuestion_0=ruleOpenQuestion
    { 
        $current = $this_OpenQuestion_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getQuestionAccess().getMultipleChoiceParserRuleCall_1()); 
    }
    this_MultipleChoice_1=ruleMultipleChoice
    { 
        $current = $this_MultipleChoice_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getQuestionAccess().getRadioChoiceParserRuleCall_2()); 
    }
    this_RadioChoice_2=ruleRadioChoice
    { 
        $current = $this_RadioChoice_2.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleAnswer
entryRuleAnswer returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAnswerRule()); }
	 iv_ruleAnswer=ruleAnswer 
	 { $current=$iv_ruleAnswer.current; } 
	 EOF 
;

// Rule Answer
ruleAnswer returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getAnswerAccess().getAnswer_ImplParserRuleCall_0()); 
    }
    this_Answer_Impl_0=ruleAnswer_Impl
    { 
        $current = $this_Answer_Impl_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getAnswerAccess().getOpenAnswerParserRuleCall_1()); 
    }
    this_OpenAnswer_1=ruleOpenAnswer
    { 
        $current = $this_OpenAnswer_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleEString
entryRuleEString returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getEStringRule()); } 
	 iv_ruleEString=ruleEString 
	 { $current=$iv_ruleEString.current.getText(); }  
	 EOF 
;

// Rule EString
ruleEString returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_STRING_0=RULE_STRING    {
		$current.merge(this_STRING_0);
    }

    { 
    newLeafNode(this_STRING_0, grammarAccess.getEStringAccess().getSTRINGTerminalRuleCall_0()); 
    }

    |    this_ID_1=RULE_ID    {
		$current.merge(this_ID_1);
    }

    { 
    newLeafNode(this_ID_1, grammarAccess.getEStringAccess().getIDTerminalRuleCall_1()); 
    }
)
    ;





// Entry rule entryRuleAnswer_Impl
entryRuleAnswer_Impl returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAnswer_ImplRule()); }
	 iv_ruleAnswer_Impl=ruleAnswer_Impl 
	 { $current=$iv_ruleAnswer_Impl.current; } 
	 EOF 
;

// Rule Answer_Impl
ruleAnswer_Impl returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getAnswer_ImplAccess().getAnswerAction_0(),
            $current);
    }
)	otherlv_1='answer' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getAnswer_ImplAccess().getAnswerKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAnswer_ImplAccess().getNameEStringParserRuleCall_2_0()); 
	    }
		lv_name_2_0=ruleEString		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAnswer_ImplRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_2_0, 
        		"EString");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getAnswer_ImplAccess().getDescriptionEStringParserRuleCall_3_0()); 
	    }
		lv_description_3_0=ruleEString		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAnswer_ImplRule());
	        }
       		set(
       			$current, 
       			"description",
        		lv_description_3_0, 
        		"EString");
	        afterParserOrEnumRuleCall();
	    }

)
))
;







// Entry rule entryRuleOpenQuestion
entryRuleOpenQuestion returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getOpenQuestionRule()); }
	 iv_ruleOpenQuestion=ruleOpenQuestion 
	 { $current=$iv_ruleOpenQuestion.current; } 
	 EOF 
;

// Rule OpenQuestion
ruleOpenQuestion returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='open:' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getOpenQuestionAccess().getOpenKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getOpenQuestionAccess().getDescriptionEStringParserRuleCall_1_0()); 
	    }
		lv_description_1_0=ruleEString		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getOpenQuestionRule());
	        }
       		set(
       			$current, 
       			"description",
        		lv_description_1_0, 
        		"EString");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		lv_isOptional_2_0=	'optional' 
    {
        newLeafNode(lv_isOptional_2_0, grammarAccess.getOpenQuestionAccess().getIsOptionalOptionalKeyword_2_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getOpenQuestionRule());
	        }
       		setWithLastConsumed($current, "isOptional", true, "optional");
	    }

)
)?(	otherlv_3='requires' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getOpenQuestionAccess().getRequiresKeyword_3_0());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getOpenQuestionRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getOpenQuestionAccess().getRequiredPreviousAnswersAnswerCrossReference_3_1_0()); 
	    }
		ruleEString		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_5=',' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getOpenQuestionAccess().getCommaKeyword_3_2_0());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getOpenQuestionRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getOpenQuestionAccess().getRequiredPreviousAnswersAnswerCrossReference_3_2_1_0()); 
	    }
		ruleEString		{ 
	        afterParserOrEnumRuleCall();
	    }

)
))*)?(
(
		{ 
	        newCompositeNode(grammarAccess.getOpenQuestionAccess().getOpenAnswerOpenAnswerParserRuleCall_4_0()); 
	    }
		lv_openAnswer_7_0=ruleOpenAnswer		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getOpenQuestionRule());
	        }
       		set(
       			$current, 
       			"openAnswer",
        		lv_openAnswer_7_0, 
        		"OpenAnswer");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleMultipleChoice
entryRuleMultipleChoice returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getMultipleChoiceRule()); }
	 iv_ruleMultipleChoice=ruleMultipleChoice 
	 { $current=$iv_ruleMultipleChoice.current; } 
	 EOF 
;

// Rule MultipleChoice
ruleMultipleChoice returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='multiple:' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getMultipleChoiceAccess().getMultipleKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getMultipleChoiceAccess().getDescriptionEStringParserRuleCall_1_0()); 
	    }
		lv_description_1_0=ruleEString		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMultipleChoiceRule());
	        }
       		set(
       			$current, 
       			"description",
        		lv_description_1_0, 
        		"EString");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		lv_isOptional_2_0=	'optional' 
    {
        newLeafNode(lv_isOptional_2_0, grammarAccess.getMultipleChoiceAccess().getIsOptionalOptionalKeyword_2_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getMultipleChoiceRule());
	        }
       		setWithLastConsumed($current, "isOptional", true, "optional");
	    }

)
)?(	otherlv_3='requires' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getMultipleChoiceAccess().getRequiresKeyword_3_0());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getMultipleChoiceRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getMultipleChoiceAccess().getRequiredPreviousAnswersAnswerCrossReference_3_1_0()); 
	    }
		ruleEString		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_5=',' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getMultipleChoiceAccess().getCommaKeyword_3_2_0());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getMultipleChoiceRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getMultipleChoiceAccess().getRequiredPreviousAnswersAnswerCrossReference_3_2_1_0()); 
	    }
		ruleEString		{ 
	        afterParserOrEnumRuleCall();
	    }

)
))*)?(
(
		{ 
	        newCompositeNode(grammarAccess.getMultipleChoiceAccess().getAnswersAnswerParserRuleCall_4_0()); 
	    }
		lv_answers_7_0=ruleAnswer		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMultipleChoiceRule());
	        }
       		add(
       			$current, 
       			"answers",
        		lv_answers_7_0, 
        		"Answer");
	        afterParserOrEnumRuleCall();
	    }

)
)+)
;





// Entry rule entryRuleRadioChoice
entryRuleRadioChoice returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getRadioChoiceRule()); }
	 iv_ruleRadioChoice=ruleRadioChoice 
	 { $current=$iv_ruleRadioChoice.current; } 
	 EOF 
;

// Rule RadioChoice
ruleRadioChoice returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='single:' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getRadioChoiceAccess().getSingleKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getRadioChoiceAccess().getDescriptionEStringParserRuleCall_1_0()); 
	    }
		lv_description_1_0=ruleEString		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRadioChoiceRule());
	        }
       		set(
       			$current, 
       			"description",
        		lv_description_1_0, 
        		"EString");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		lv_isOptional_2_0=	'optional' 
    {
        newLeafNode(lv_isOptional_2_0, grammarAccess.getRadioChoiceAccess().getIsOptionalOptionalKeyword_2_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getRadioChoiceRule());
	        }
       		setWithLastConsumed($current, "isOptional", true, "optional");
	    }

)
)?(	otherlv_3='requires' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getRadioChoiceAccess().getRequiresKeyword_3_0());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getRadioChoiceRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getRadioChoiceAccess().getRequiredPreviousAnswersAnswerCrossReference_3_1_0()); 
	    }
		ruleEString		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_5=',' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getRadioChoiceAccess().getCommaKeyword_3_2_0());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getRadioChoiceRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getRadioChoiceAccess().getRequiredPreviousAnswersAnswerCrossReference_3_2_1_0()); 
	    }
		ruleEString		{ 
	        afterParserOrEnumRuleCall();
	    }

)
))*)?(
(
		{ 
	        newCompositeNode(grammarAccess.getRadioChoiceAccess().getAnswersAnswerParserRuleCall_4_0()); 
	    }
		lv_answers_7_0=ruleAnswer		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRadioChoiceRule());
	        }
       		add(
       			$current, 
       			"answers",
        		lv_answers_7_0, 
        		"Answer");
	        afterParserOrEnumRuleCall();
	    }

)
)+)
;





// Entry rule entryRuleOpenAnswer
entryRuleOpenAnswer returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getOpenAnswerRule()); }
	 iv_ruleOpenAnswer=ruleOpenAnswer 
	 { $current=$iv_ruleOpenAnswer.current; } 
	 EOF 
;

// Rule OpenAnswer
ruleOpenAnswer returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getOpenAnswerAccess().getOpenAnswerAction_0(),
            $current);
    }
)	otherlv_1='text' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getOpenAnswerAccess().getTextKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getOpenAnswerAccess().getNameEStringParserRuleCall_2_0()); 
	    }
		lv_name_2_0=ruleEString		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getOpenAnswerRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_2_0, 
        		"EString");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getOpenAnswerAccess().getDescriptionEStringParserRuleCall_3_0()); 
	    }
		lv_description_3_0=ruleEString		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getOpenAnswerRule());
	        }
       		set(
       			$current, 
       			"description",
        		lv_description_3_0, 
        		"EString");
	        afterParserOrEnumRuleCall();
	    }

)
)?)
;





RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


