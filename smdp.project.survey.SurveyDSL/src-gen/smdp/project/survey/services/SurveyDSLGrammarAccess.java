/*
* generated by Xtext
*/
package smdp.project.survey.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class SurveyDSLGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class SurveyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Survey");
		private final Assignment cQuestionsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cQuestionsQuestionParserRuleCall_0 = (RuleCall)cQuestionsAssignment.eContents().get(0);
		
		//Survey:
		//	questions+=Question+;
		public ParserRule getRule() { return rule; }

		//questions+=Question+
		public Assignment getQuestionsAssignment() { return cQuestionsAssignment; }

		//Question
		public RuleCall getQuestionsQuestionParserRuleCall_0() { return cQuestionsQuestionParserRuleCall_0; }
	}

	public class QuestionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Question");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cOpenQuestionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cMultipleChoiceParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cRadioChoiceParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Question:
		//	OpenQuestion | MultipleChoice | RadioChoice;
		public ParserRule getRule() { return rule; }

		//OpenQuestion | MultipleChoice | RadioChoice
		public Alternatives getAlternatives() { return cAlternatives; }

		//OpenQuestion
		public RuleCall getOpenQuestionParserRuleCall_0() { return cOpenQuestionParserRuleCall_0; }

		//MultipleChoice
		public RuleCall getMultipleChoiceParserRuleCall_1() { return cMultipleChoiceParserRuleCall_1; }

		//RadioChoice
		public RuleCall getRadioChoiceParserRuleCall_2() { return cRadioChoiceParserRuleCall_2; }
	}

	public class AnswerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Answer");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAnswer_ImplParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cOpenAnswerParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Answer:
		//	Answer_Impl | OpenAnswer;
		public ParserRule getRule() { return rule; }

		//Answer_Impl | OpenAnswer
		public Alternatives getAlternatives() { return cAlternatives; }

		//Answer_Impl
		public RuleCall getAnswer_ImplParserRuleCall_0() { return cAnswer_ImplParserRuleCall_0; }

		//OpenAnswer
		public RuleCall getOpenAnswerParserRuleCall_1() { return cOpenAnswerParserRuleCall_1; }
	}

	public class EStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EString");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//EString returns ecore::EString:
		//	STRING | ID;
		public ParserRule getRule() { return rule; }

		//STRING | ID
		public Alternatives getAlternatives() { return cAlternatives; }

		//STRING
		public RuleCall getSTRINGTerminalRuleCall_0() { return cSTRINGTerminalRuleCall_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }
	}

	public class Answer_ImplElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Answer_Impl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cAnswerAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cAnswerKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameEStringParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Assignment cDescriptionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cDescriptionEStringParserRuleCall_3_0 = (RuleCall)cDescriptionAssignment_3.eContents().get(0);
		
		//Answer_Impl returns Answer:
		//	{Answer} "answer" name=EString description=EString;
		public ParserRule getRule() { return rule; }

		//{Answer} "answer" name=EString description=EString
		public Group getGroup() { return cGroup; }

		//{Answer}
		public Action getAnswerAction_0() { return cAnswerAction_0; }

		//"answer"
		public Keyword getAnswerKeyword_1() { return cAnswerKeyword_1; }

		//name=EString
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//EString
		public RuleCall getNameEStringParserRuleCall_2_0() { return cNameEStringParserRuleCall_2_0; }

		//description=EString
		public Assignment getDescriptionAssignment_3() { return cDescriptionAssignment_3; }

		//EString
		public RuleCall getDescriptionEStringParserRuleCall_3_0() { return cDescriptionEStringParserRuleCall_3_0; }
	}

	public class EBooleanElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EBoolean");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cTrueKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cFalseKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//EBoolean returns ecore::EBoolean:
		//	"true" | "false";
		public ParserRule getRule() { return rule; }

		//"true" | "false"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"true"
		public Keyword getTrueKeyword_0() { return cTrueKeyword_0; }

		//"false"
		public Keyword getFalseKeyword_1() { return cFalseKeyword_1; }
	}

	public class OpenQuestionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OpenQuestion");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cOpenKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cDescriptionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDescriptionEStringParserRuleCall_1_0 = (RuleCall)cDescriptionAssignment_1.eContents().get(0);
		private final Assignment cIsOptionalAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Keyword cIsOptionalOptionalKeyword_2_0 = (Keyword)cIsOptionalAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cRequiresKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cRequiredPreviousAnswersAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final CrossReference cRequiredPreviousAnswersAnswerCrossReference_3_1_0 = (CrossReference)cRequiredPreviousAnswersAssignment_3_1.eContents().get(0);
		private final RuleCall cRequiredPreviousAnswersAnswerEStringParserRuleCall_3_1_0_1 = (RuleCall)cRequiredPreviousAnswersAnswerCrossReference_3_1_0.eContents().get(1);
		private final Group cGroup_3_2 = (Group)cGroup_3.eContents().get(2);
		private final Keyword cCommaKeyword_3_2_0 = (Keyword)cGroup_3_2.eContents().get(0);
		private final Assignment cRequiredPreviousAnswersAssignment_3_2_1 = (Assignment)cGroup_3_2.eContents().get(1);
		private final CrossReference cRequiredPreviousAnswersAnswerCrossReference_3_2_1_0 = (CrossReference)cRequiredPreviousAnswersAssignment_3_2_1.eContents().get(0);
		private final RuleCall cRequiredPreviousAnswersAnswerEStringParserRuleCall_3_2_1_0_1 = (RuleCall)cRequiredPreviousAnswersAnswerCrossReference_3_2_1_0.eContents().get(1);
		private final Assignment cOpenAnswerAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cOpenAnswerOpenAnswerParserRuleCall_4_0 = (RuleCall)cOpenAnswerAssignment_4.eContents().get(0);
		
		//OpenQuestion:
		//	"open:" description=EString isOptional?="optional"? ("requires" requiredPreviousAnswers+=[Answer|EString] (","
		//	requiredPreviousAnswers+=[Answer|EString])*)? openAnswer=OpenAnswer;
		public ParserRule getRule() { return rule; }

		//"open:" description=EString isOptional?="optional"? ("requires" requiredPreviousAnswers+=[Answer|EString] (","
		//requiredPreviousAnswers+=[Answer|EString])*)? openAnswer=OpenAnswer
		public Group getGroup() { return cGroup; }

		//"open:"
		public Keyword getOpenKeyword_0() { return cOpenKeyword_0; }

		//description=EString
		public Assignment getDescriptionAssignment_1() { return cDescriptionAssignment_1; }

		//EString
		public RuleCall getDescriptionEStringParserRuleCall_1_0() { return cDescriptionEStringParserRuleCall_1_0; }

		//isOptional?="optional"?
		public Assignment getIsOptionalAssignment_2() { return cIsOptionalAssignment_2; }

		//"optional"
		public Keyword getIsOptionalOptionalKeyword_2_0() { return cIsOptionalOptionalKeyword_2_0; }

		//("requires" requiredPreviousAnswers+=[Answer|EString] ("," requiredPreviousAnswers+=[Answer|EString])*)?
		public Group getGroup_3() { return cGroup_3; }

		//"requires"
		public Keyword getRequiresKeyword_3_0() { return cRequiresKeyword_3_0; }

		//requiredPreviousAnswers+=[Answer|EString]
		public Assignment getRequiredPreviousAnswersAssignment_3_1() { return cRequiredPreviousAnswersAssignment_3_1; }

		//[Answer|EString]
		public CrossReference getRequiredPreviousAnswersAnswerCrossReference_3_1_0() { return cRequiredPreviousAnswersAnswerCrossReference_3_1_0; }

		//EString
		public RuleCall getRequiredPreviousAnswersAnswerEStringParserRuleCall_3_1_0_1() { return cRequiredPreviousAnswersAnswerEStringParserRuleCall_3_1_0_1; }

		//("," requiredPreviousAnswers+=[Answer|EString])*
		public Group getGroup_3_2() { return cGroup_3_2; }

		//","
		public Keyword getCommaKeyword_3_2_0() { return cCommaKeyword_3_2_0; }

		//requiredPreviousAnswers+=[Answer|EString]
		public Assignment getRequiredPreviousAnswersAssignment_3_2_1() { return cRequiredPreviousAnswersAssignment_3_2_1; }

		//[Answer|EString]
		public CrossReference getRequiredPreviousAnswersAnswerCrossReference_3_2_1_0() { return cRequiredPreviousAnswersAnswerCrossReference_3_2_1_0; }

		//EString
		public RuleCall getRequiredPreviousAnswersAnswerEStringParserRuleCall_3_2_1_0_1() { return cRequiredPreviousAnswersAnswerEStringParserRuleCall_3_2_1_0_1; }

		//openAnswer=OpenAnswer
		public Assignment getOpenAnswerAssignment_4() { return cOpenAnswerAssignment_4; }

		//OpenAnswer
		public RuleCall getOpenAnswerOpenAnswerParserRuleCall_4_0() { return cOpenAnswerOpenAnswerParserRuleCall_4_0; }
	}

	public class MultipleChoiceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MultipleChoice");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMultipleKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cDescriptionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDescriptionEStringParserRuleCall_1_0 = (RuleCall)cDescriptionAssignment_1.eContents().get(0);
		private final Assignment cIsOptionalAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Keyword cIsOptionalOptionalKeyword_2_0 = (Keyword)cIsOptionalAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cRequiresKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cRequiredPreviousAnswersAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final CrossReference cRequiredPreviousAnswersAnswerCrossReference_3_1_0 = (CrossReference)cRequiredPreviousAnswersAssignment_3_1.eContents().get(0);
		private final RuleCall cRequiredPreviousAnswersAnswerEStringParserRuleCall_3_1_0_1 = (RuleCall)cRequiredPreviousAnswersAnswerCrossReference_3_1_0.eContents().get(1);
		private final Group cGroup_3_2 = (Group)cGroup_3.eContents().get(2);
		private final Keyword cCommaKeyword_3_2_0 = (Keyword)cGroup_3_2.eContents().get(0);
		private final Assignment cRequiredPreviousAnswersAssignment_3_2_1 = (Assignment)cGroup_3_2.eContents().get(1);
		private final CrossReference cRequiredPreviousAnswersAnswerCrossReference_3_2_1_0 = (CrossReference)cRequiredPreviousAnswersAssignment_3_2_1.eContents().get(0);
		private final RuleCall cRequiredPreviousAnswersAnswerEStringParserRuleCall_3_2_1_0_1 = (RuleCall)cRequiredPreviousAnswersAnswerCrossReference_3_2_1_0.eContents().get(1);
		private final Assignment cAnswersAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cAnswersAnswerParserRuleCall_4_0 = (RuleCall)cAnswersAssignment_4.eContents().get(0);
		
		//MultipleChoice:
		//	"multiple:" description=EString isOptional?="optional"? ("requires" requiredPreviousAnswers+=[Answer|EString] (","
		//	requiredPreviousAnswers+=[Answer|EString])*)? answers+=Answer+;
		public ParserRule getRule() { return rule; }

		//"multiple:" description=EString isOptional?="optional"? ("requires" requiredPreviousAnswers+=[Answer|EString] (","
		//requiredPreviousAnswers+=[Answer|EString])*)? answers+=Answer+
		public Group getGroup() { return cGroup; }

		//"multiple:"
		public Keyword getMultipleKeyword_0() { return cMultipleKeyword_0; }

		//description=EString
		public Assignment getDescriptionAssignment_1() { return cDescriptionAssignment_1; }

		//EString
		public RuleCall getDescriptionEStringParserRuleCall_1_0() { return cDescriptionEStringParserRuleCall_1_0; }

		//isOptional?="optional"?
		public Assignment getIsOptionalAssignment_2() { return cIsOptionalAssignment_2; }

		//"optional"
		public Keyword getIsOptionalOptionalKeyword_2_0() { return cIsOptionalOptionalKeyword_2_0; }

		//("requires" requiredPreviousAnswers+=[Answer|EString] ("," requiredPreviousAnswers+=[Answer|EString])*)?
		public Group getGroup_3() { return cGroup_3; }

		//"requires"
		public Keyword getRequiresKeyword_3_0() { return cRequiresKeyword_3_0; }

		//requiredPreviousAnswers+=[Answer|EString]
		public Assignment getRequiredPreviousAnswersAssignment_3_1() { return cRequiredPreviousAnswersAssignment_3_1; }

		//[Answer|EString]
		public CrossReference getRequiredPreviousAnswersAnswerCrossReference_3_1_0() { return cRequiredPreviousAnswersAnswerCrossReference_3_1_0; }

		//EString
		public RuleCall getRequiredPreviousAnswersAnswerEStringParserRuleCall_3_1_0_1() { return cRequiredPreviousAnswersAnswerEStringParserRuleCall_3_1_0_1; }

		//("," requiredPreviousAnswers+=[Answer|EString])*
		public Group getGroup_3_2() { return cGroup_3_2; }

		//","
		public Keyword getCommaKeyword_3_2_0() { return cCommaKeyword_3_2_0; }

		//requiredPreviousAnswers+=[Answer|EString]
		public Assignment getRequiredPreviousAnswersAssignment_3_2_1() { return cRequiredPreviousAnswersAssignment_3_2_1; }

		//[Answer|EString]
		public CrossReference getRequiredPreviousAnswersAnswerCrossReference_3_2_1_0() { return cRequiredPreviousAnswersAnswerCrossReference_3_2_1_0; }

		//EString
		public RuleCall getRequiredPreviousAnswersAnswerEStringParserRuleCall_3_2_1_0_1() { return cRequiredPreviousAnswersAnswerEStringParserRuleCall_3_2_1_0_1; }

		//answers+=Answer+
		public Assignment getAnswersAssignment_4() { return cAnswersAssignment_4; }

		//Answer
		public RuleCall getAnswersAnswerParserRuleCall_4_0() { return cAnswersAnswerParserRuleCall_4_0; }
	}

	public class RadioChoiceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RadioChoice");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSingleKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cDescriptionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDescriptionEStringParserRuleCall_1_0 = (RuleCall)cDescriptionAssignment_1.eContents().get(0);
		private final Assignment cIsOptionalAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Keyword cIsOptionalOptionalKeyword_2_0 = (Keyword)cIsOptionalAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cRequiresKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cRequiredPreviousAnswersAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final CrossReference cRequiredPreviousAnswersAnswerCrossReference_3_1_0 = (CrossReference)cRequiredPreviousAnswersAssignment_3_1.eContents().get(0);
		private final RuleCall cRequiredPreviousAnswersAnswerEStringParserRuleCall_3_1_0_1 = (RuleCall)cRequiredPreviousAnswersAnswerCrossReference_3_1_0.eContents().get(1);
		private final Group cGroup_3_2 = (Group)cGroup_3.eContents().get(2);
		private final Keyword cCommaKeyword_3_2_0 = (Keyword)cGroup_3_2.eContents().get(0);
		private final Assignment cRequiredPreviousAnswersAssignment_3_2_1 = (Assignment)cGroup_3_2.eContents().get(1);
		private final CrossReference cRequiredPreviousAnswersAnswerCrossReference_3_2_1_0 = (CrossReference)cRequiredPreviousAnswersAssignment_3_2_1.eContents().get(0);
		private final RuleCall cRequiredPreviousAnswersAnswerEStringParserRuleCall_3_2_1_0_1 = (RuleCall)cRequiredPreviousAnswersAnswerCrossReference_3_2_1_0.eContents().get(1);
		private final Assignment cAnswersAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cAnswersAnswerParserRuleCall_4_0 = (RuleCall)cAnswersAssignment_4.eContents().get(0);
		
		//RadioChoice:
		//	"single:" description=EString isOptional?="optional"? ("requires" requiredPreviousAnswers+=[Answer|EString] (","
		//	requiredPreviousAnswers+=[Answer|EString])*)? answers+=Answer+;
		public ParserRule getRule() { return rule; }

		//"single:" description=EString isOptional?="optional"? ("requires" requiredPreviousAnswers+=[Answer|EString] (","
		//requiredPreviousAnswers+=[Answer|EString])*)? answers+=Answer+
		public Group getGroup() { return cGroup; }

		//"single:"
		public Keyword getSingleKeyword_0() { return cSingleKeyword_0; }

		//description=EString
		public Assignment getDescriptionAssignment_1() { return cDescriptionAssignment_1; }

		//EString
		public RuleCall getDescriptionEStringParserRuleCall_1_0() { return cDescriptionEStringParserRuleCall_1_0; }

		//isOptional?="optional"?
		public Assignment getIsOptionalAssignment_2() { return cIsOptionalAssignment_2; }

		//"optional"
		public Keyword getIsOptionalOptionalKeyword_2_0() { return cIsOptionalOptionalKeyword_2_0; }

		//("requires" requiredPreviousAnswers+=[Answer|EString] ("," requiredPreviousAnswers+=[Answer|EString])*)?
		public Group getGroup_3() { return cGroup_3; }

		//"requires"
		public Keyword getRequiresKeyword_3_0() { return cRequiresKeyword_3_0; }

		//requiredPreviousAnswers+=[Answer|EString]
		public Assignment getRequiredPreviousAnswersAssignment_3_1() { return cRequiredPreviousAnswersAssignment_3_1; }

		//[Answer|EString]
		public CrossReference getRequiredPreviousAnswersAnswerCrossReference_3_1_0() { return cRequiredPreviousAnswersAnswerCrossReference_3_1_0; }

		//EString
		public RuleCall getRequiredPreviousAnswersAnswerEStringParserRuleCall_3_1_0_1() { return cRequiredPreviousAnswersAnswerEStringParserRuleCall_3_1_0_1; }

		//("," requiredPreviousAnswers+=[Answer|EString])*
		public Group getGroup_3_2() { return cGroup_3_2; }

		//","
		public Keyword getCommaKeyword_3_2_0() { return cCommaKeyword_3_2_0; }

		//requiredPreviousAnswers+=[Answer|EString]
		public Assignment getRequiredPreviousAnswersAssignment_3_2_1() { return cRequiredPreviousAnswersAssignment_3_2_1; }

		//[Answer|EString]
		public CrossReference getRequiredPreviousAnswersAnswerCrossReference_3_2_1_0() { return cRequiredPreviousAnswersAnswerCrossReference_3_2_1_0; }

		//EString
		public RuleCall getRequiredPreviousAnswersAnswerEStringParserRuleCall_3_2_1_0_1() { return cRequiredPreviousAnswersAnswerEStringParserRuleCall_3_2_1_0_1; }

		//answers+=Answer+
		public Assignment getAnswersAssignment_4() { return cAnswersAssignment_4; }

		//Answer
		public RuleCall getAnswersAnswerParserRuleCall_4_0() { return cAnswersAnswerParserRuleCall_4_0; }
	}

	public class OpenAnswerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OpenAnswer");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cOpenAnswerAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cTextKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameEStringParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Assignment cDescriptionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cDescriptionEStringParserRuleCall_3_0 = (RuleCall)cDescriptionAssignment_3.eContents().get(0);
		
		//OpenAnswer:
		//	{OpenAnswer} "text" name=EString description=EString?;
		public ParserRule getRule() { return rule; }

		//{OpenAnswer} "text" name=EString description=EString?
		public Group getGroup() { return cGroup; }

		//{OpenAnswer}
		public Action getOpenAnswerAction_0() { return cOpenAnswerAction_0; }

		//"text"
		public Keyword getTextKeyword_1() { return cTextKeyword_1; }

		//name=EString
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//EString
		public RuleCall getNameEStringParserRuleCall_2_0() { return cNameEStringParserRuleCall_2_0; }

		//description=EString?
		public Assignment getDescriptionAssignment_3() { return cDescriptionAssignment_3; }

		//EString
		public RuleCall getDescriptionEStringParserRuleCall_3_0() { return cDescriptionEStringParserRuleCall_3_0; }
	}
	
	
	private SurveyElements pSurvey;
	private QuestionElements pQuestion;
	private AnswerElements pAnswer;
	private EStringElements pEString;
	private Answer_ImplElements pAnswer_Impl;
	private EBooleanElements pEBoolean;
	private OpenQuestionElements pOpenQuestion;
	private MultipleChoiceElements pMultipleChoice;
	private RadioChoiceElements pRadioChoice;
	private OpenAnswerElements pOpenAnswer;
	
	private final Grammar grammar;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public SurveyDSLGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("smdp.project.survey.SurveyDSL".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Survey:
	//	questions+=Question+;
	public SurveyElements getSurveyAccess() {
		return (pSurvey != null) ? pSurvey : (pSurvey = new SurveyElements());
	}
	
	public ParserRule getSurveyRule() {
		return getSurveyAccess().getRule();
	}

	//Question:
	//	OpenQuestion | MultipleChoice | RadioChoice;
	public QuestionElements getQuestionAccess() {
		return (pQuestion != null) ? pQuestion : (pQuestion = new QuestionElements());
	}
	
	public ParserRule getQuestionRule() {
		return getQuestionAccess().getRule();
	}

	//Answer:
	//	Answer_Impl | OpenAnswer;
	public AnswerElements getAnswerAccess() {
		return (pAnswer != null) ? pAnswer : (pAnswer = new AnswerElements());
	}
	
	public ParserRule getAnswerRule() {
		return getAnswerAccess().getRule();
	}

	//EString returns ecore::EString:
	//	STRING | ID;
	public EStringElements getEStringAccess() {
		return (pEString != null) ? pEString : (pEString = new EStringElements());
	}
	
	public ParserRule getEStringRule() {
		return getEStringAccess().getRule();
	}

	//Answer_Impl returns Answer:
	//	{Answer} "answer" name=EString description=EString;
	public Answer_ImplElements getAnswer_ImplAccess() {
		return (pAnswer_Impl != null) ? pAnswer_Impl : (pAnswer_Impl = new Answer_ImplElements());
	}
	
	public ParserRule getAnswer_ImplRule() {
		return getAnswer_ImplAccess().getRule();
	}

	//EBoolean returns ecore::EBoolean:
	//	"true" | "false";
	public EBooleanElements getEBooleanAccess() {
		return (pEBoolean != null) ? pEBoolean : (pEBoolean = new EBooleanElements());
	}
	
	public ParserRule getEBooleanRule() {
		return getEBooleanAccess().getRule();
	}

	//OpenQuestion:
	//	"open:" description=EString isOptional?="optional"? ("requires" requiredPreviousAnswers+=[Answer|EString] (","
	//	requiredPreviousAnswers+=[Answer|EString])*)? openAnswer=OpenAnswer;
	public OpenQuestionElements getOpenQuestionAccess() {
		return (pOpenQuestion != null) ? pOpenQuestion : (pOpenQuestion = new OpenQuestionElements());
	}
	
	public ParserRule getOpenQuestionRule() {
		return getOpenQuestionAccess().getRule();
	}

	//MultipleChoice:
	//	"multiple:" description=EString isOptional?="optional"? ("requires" requiredPreviousAnswers+=[Answer|EString] (","
	//	requiredPreviousAnswers+=[Answer|EString])*)? answers+=Answer+;
	public MultipleChoiceElements getMultipleChoiceAccess() {
		return (pMultipleChoice != null) ? pMultipleChoice : (pMultipleChoice = new MultipleChoiceElements());
	}
	
	public ParserRule getMultipleChoiceRule() {
		return getMultipleChoiceAccess().getRule();
	}

	//RadioChoice:
	//	"single:" description=EString isOptional?="optional"? ("requires" requiredPreviousAnswers+=[Answer|EString] (","
	//	requiredPreviousAnswers+=[Answer|EString])*)? answers+=Answer+;
	public RadioChoiceElements getRadioChoiceAccess() {
		return (pRadioChoice != null) ? pRadioChoice : (pRadioChoice = new RadioChoiceElements());
	}
	
	public ParserRule getRadioChoiceRule() {
		return getRadioChoiceAccess().getRule();
	}

	//OpenAnswer:
	//	{OpenAnswer} "text" name=EString description=EString?;
	public OpenAnswerElements getOpenAnswerAccess() {
		return (pOpenAnswer != null) ? pOpenAnswer : (pOpenAnswer = new OpenAnswerElements());
	}
	
	public ParserRule getOpenAnswerRule() {
		return getOpenAnswerAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
